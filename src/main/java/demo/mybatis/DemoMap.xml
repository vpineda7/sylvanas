<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="demo">

<select id="selectPerson" parameterType="int" resultType="hashmap">
	SELECT * FROM PERSON WHERE ID = #{id}
</select>

<select
  id="selectPerson"
  parameterType="int"
  parameterMap="deprecated"
  resultType="hashmap"
  resultMap="personResultMap"
  flushCache="false"
  useCache="true"
  timeout="10000"
  fetchSize="256"
  statementType="PREPARED"
  resultSetType="FORWARD_ONLY">
</select>

<insert
  id="insertAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  keyProperty=""
  keyColumn=""
  useGeneratedKeys=""
  timeout="20">
</insert>

<update
  id="updateAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  timeout="20">
</update>

<delete
  id="deleteAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  timeout="20">
</delete>

<insert id="insertAuthor">
  insert into Author (id,username,password,email,bio)
  values (#{id},#{username},#{password},#{email},#{bio})
</insert>

<update id="updateAuthor">
  update Author set
    username = #{username},
    password = #{password},
    email = #{email},
    bio = #{bio}
  where id = #{id}
</update>

<delete id="deleteAuthor">
  delete from Author where id = #{id}
</delete>

<insert id="insertAuthor" useGeneratedKeys="true" keyProperty="id">
  insert into Author (username,password,email,bio)
  values (#{username},#{password},#{email},#{bio})
</insert>

<insert id="insertAuthor">
	<selectKey keyProperty="id" resultType="int" order="BEFORE">
    	select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1
  	</selectKey>
  	insert into Author
    	(id, username, password, email,bio, favourite_section)
  	values
    	(#{id}, #{username}, #{password}, #{email}, #{bio}, #{favouriteSection,jdbcType=VARCHAR})
</insert>

<selectKey
  keyProperty="id"
  resultType="int"
  order="BEFORE"
  statementType="PREPARED">
</selectKey>

<sql id="userColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>

<select id="selectUsers" resultType="map">
  select
    <include refid="userColumns"><property name="alias" value="t1"/></include>,
    <include refid="userColumns"><property name="alias" value="t2"/></include>
  from some_table t1
    cross join some_table t2
</select>

<sql id="sometable">
  ${prefix}Table
</sql>

<sql id="someinclude">
  from
    <include refid="${include_target}"/>
</sql>

<select id="select" resultType="map">
  select
    field1, field2, field3
  <include refid="someinclude">
    <property name="prefix" value="Some"/>
    <property name="include_target" value="sometable"/>
  </include>
</select>

<select id="selectUsers" resultType="User">
  select id, username, password
  from users
  where id = #{id}
</select>

<insert id="insertUser" parameterType="User">
  insert into users (id, username, password)
  values (#{id}, #{username}, #{password})
</insert>

<select id="selectUsers" resultType="map">
  select id, username, hashedPassword
  from some_table
  where id = #{id}
</select>

<select id="selectUsers" resultType="com.someapp.model.User">
  select id, username, hashedPassword
  from some_table
  where id = #{id}
</select>

<!-- In mybatis-config.xml file -->
<typeAlias type="com.someapp.model.User" alias="User"/>

<!-- In SQL Mapping XML file -->
<select id="selectUsers" resultType="User">
  select id, username, hashedPassword
  from some_table
  where id = #{id}
</select>

<select id="selectUsers" resultType="User">
  select
    user_id             as "id",
    user_name           as "userName",
    hashed_password     as "hashedPassword"
  from some_table
  where id = #{id}
</select>

<resultMap id="userResultMap" type="User">
  <id property="id" column="user_id" />
  <result property="username" column="username"/>
  <result property="password" column="password"/>
</resultMap>

<select id="selectUsers" resultMap="userResultMap">
  select user_id, user_name, hashed_password
  from some_table
  where id = #{id}
</select>





































<select id="findActiveBlogWithTitleLike" resultType="Blog">

	SELECT * FROM BLOG

	WHERE state = 'ACTIVE'

	<if test="title != null">
		AND title like #{title}
	</if>

</select>


<select id="findActiveBlogLike" resultType="Blog">

	SELECT * FROM BLOG

	WHERE state = 'ACTIVE'

	<if test="title != null">
	
		AND title like #{title}
	</if>

	<if test="author != null and author.name != null">
	
		AND author_name like #{author.name}
	</if>

</select>

<select id="findActiveBlogLike" resultType="Blog">
	
	SELECT * FROM BLOG

	WHERE state = 'ACTIVE'
	
	<choose>
		<when test="title != null">
     			AND title like #{title}
   		</when>
   		<when test="author != null and author.name != null">
			AND author_name like #{author.name}
   		</when>
   		<otherwise>
			AND featured = 1
   		</otherwise>
	</choose>
</select>

<select id="findActiveBlogLike" resultType="Blog">
	
	SELECT * FROM BLOG
	
	<where> 
		<if test="state != null">
		     state = #{state}
		</if> 
		<if test="title != null">
		    AND title like #{title}
		</if>
		<if test="author != null and author.name != null">
		    AND author_name like #{author.name}
		</if>
	</where>
	
</select>

<select id="selectPostIn" resultType="domain.blog.Post">

 		SELECT * FROM POST P WHERE ID in
 		
 		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
       	#{item}
 		</foreach>
 		
</select>

<select id="selectBlogsLike" resultType="Blog">

	<bind name="pattern" value="'%' + _parameter.getTitle() + '%'" />
	
	SELECT * FROM BLOG
	
	WHERE title LIKE #{pattern}
	
</select>

<update id="updateAuthorIfNecessary">
	
	update Author
	
	<set>
		<if test="username != null">username=#{username},</if>
		<if test="password != null">password=#{password},</if>
		<if test="email != null">email=#{email},</if>
		<if test="bio != null">bio=#{bio}</if>
	</set>
			
	where id=#{id}
</update>

<insert id="insert">

	<selectKey keyProperty="id" resultType="int" order="BEFORE">
	
	<if test="_databaseId == 'oracle'">
		select seq_users.nextval from dual
	</if>
	
	<if test="_databaseId == 'db2'">
		select nextval for seq_users from sysibm.sysdummy1"
	</if>
	</selectKey>
	
 	insert into users values (#{id}, #{name})
 	
</insert>

</mapper>